{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algoritmo EM\n",
    "Supongamos que $X$ ha sido observado de manera discreta, es decir,   $\\{X_{t_1}=x_1,\\ldots,X_{t_n}=x_n\\}$. Sea $Y=\\{Y_i\\}_{i=1}^n=\\{X_{t_i}\\}_{i=1}^n$. La dificultad de este algoritmo es el  **Paso E** donde se debe calcular   $$E_{Q_a}[\\log(L_{t_n}(Q))|Y]=\\sum_{i=1}^m\\sum_{j\\neq i}\\log(q_{ij})E_{Q_a}[N_{ij}(t_n)|Y]-\\sum_{i=1}^m\\sum_{j\\neq i}q_{ij}E_{Q_a}[R_{i}(t_n)|Y].$$\n",
    "\n",
    "Entonces es suficiente calcular\n",
    "$$\\tilde{N}_{kl}^{ij}(\\Delta)=E_{Q_a}[N_{kl}(\\Delta)|X_{\\Delta}=j,X_0=i]$$\n",
    "y \n",
    "$$\\tilde{R}_{k}^{ij}(\\Delta)=E_{Q_a}[R_{k}(\\Delta)|X_{\\Delta}=j,X_0=i]$$\n",
    "**SoluciÃ³n **\n",
    "1. Inicializar $Q_0\\in\\mathscr{Q}$ y hacer $r=0$\n",
    "2. Calcular $$E_{Q_r}[N_{lk}(t_n)|Y]=\\sum_{s=1}^{n-1}\\frac{1}{B}\\sum_{b=1}^{B}N_{lk}^{ij(b)}(\\Delta_s)$$\n",
    "y $$E_{Q_r}[R_{i}(t_n)|Y]=\\sum_{s=1}^{n-1}\\frac{1}{B}\\sum_{b=1}^{B}R_{i}^{kl(B)}(\\Delta_s)$$\n",
    "\n",
    "3. Calcular \n",
    "$$(Q_{r+1})_{ij}=\\frac{E_{Q_r}[N_{ij}(t_n)|Y]}{E_{Q_r}[R_{i}(t_n)|Y]}.$$\n",
    "Hacer $r=r+1$ y regresar al paso 2. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4x4 Array{Float64,2}:\n",
       " 0.0  1.0  0.0  1.0\n",
       " 1.0  0.0  1.0  0.0\n",
       " 1.0  0.0  0.0  0.0\n",
       " 0.0  1.0  0.0  0.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using StatsBase\n",
    "using Distributions\n",
    "function MJPBisect(ini,fin,m,E,Q,Qii,T1,T2,cond)\n",
    "  tray=[T1 ini;T2 fin]\n",
    "  t0=T2-T1\n",
    "  t=t0/2\n",
    "  t1=-t\n",
    "  # Transition matrix of time lag t\n",
    "  P=expm(t*Q)\n",
    "  # We assign the probabilities of transitioning through each state\n",
    "  prob=zeros(m)\n",
    "  for i=E\n",
    "    prob[i]=P[ini,i]*P[i,fin]\n",
    "  end\n",
    "\n",
    "  # We modify the probabilities if we are being conditioned to have at least 2 jumps\n",
    "  if cond\n",
    "    if ini==fin\n",
    "      prob[ini]-=exp(-t0*Qii[ini])\n",
    "    elseif Qii[ini]==Qii[fin]\n",
    "      r=exp(t1*Qii[ini])*t*exp(t1*Qii[ini])*Q[ini,fin]\n",
    "      prob[ini]-=r\n",
    "      prob[fin]-=r\n",
    "    else\n",
    "      r=exp(t1*Qii[ini])\n",
    "      r=r*(r-exp(t1*Qii[fin]))*Q[ini,fin]/(Qii[fin]-Qii[ini])\n",
    "      prob[ini]-=r\n",
    "      prob[fin]-=r\n",
    "    end\n",
    "    # We sample to see wich state we passed through\n",
    "    mid=sample(E,weights(prob))\n",
    "\n",
    "    # Once we have the state, we check to see in which manner we did so (number of jumps)\n",
    "    if ini==mid\n",
    "      if mid==fin\n",
    "        r=exp(t1*Qii[ini])\n",
    "        rc=P[ini,mid]-r\n",
    "        (bef,aft)=sample([(0,2),(2,0),(2,2)],weights([r*rc,rc*r,rc*rc]))\n",
    "      else\n",
    "        r=exp(-t*Qii[ini])\n",
    "        if Qii[mid]==Qii[fin]\n",
    "          r1=t*exp(t1*Qii[mid])*Q[mid,fin]\n",
    "        else\n",
    "          r1=(exp(t1*Qii[mid])-exp(t1*Qii[fin]))*Q[mid,fin]/(Qii[fin]-Qii[mid])\n",
    "        end\n",
    "        (bef,aft)=sample([(0,2),(2,1),(2,2)],weights([r*(P[mid,fin]-r1),(P[ini,mid]-r)*r1,(P[ini,mid]-r)*(P[mid,fin]-r1)]))\n",
    "      end\n",
    "    else\n",
    "      if mid==fin\n",
    "        if Qii[ini]==Qii[mid]\n",
    "          r=t*exp(t1*Qii[ini])*Q[ini,mid]\n",
    "        else\n",
    "          r=(exp(t1*Qii[ini])-exp(t1*Qii[mid]))*Q[ini,mid]/(Qii[mid]-Qii[ini])\n",
    "        end\n",
    "        r1=exp(t1*Qii[mid])\n",
    "        (bef,aft)=sample([(1,2),(2,0),(2,2)],weights([r*(P[mid,fin]-r1),(P[ini,mid]-r)*r1,(P[ini,mid]-r)*(P[mid,fin]-r1)]))\n",
    "      else\n",
    "        if Qii[ini]==Qii[mid]\n",
    "          r=t*exp(t1*Qii[ini])*Q[ini,mid]\n",
    "        else\n",
    "          r=(exp(t1*Qii[ini])-exp(t1*Qii[mid]))*Q[ini,mid]/(Qii[mid]-Qii[ini])\n",
    "        end\n",
    "        if Qii[mid]==Qii[fin]\n",
    "          r1=t*exp(t1*Qii[mid])*Q[mid,fin]\n",
    "        else\n",
    "          r1=(exp(t1*Qii[mid])-exp(t1*Qii[fin]))*Q[mid,fin]/(Qii[fin]-Qii[mid])\n",
    "        end\n",
    "        (bef,aft)=sample([(1,1),(1,2),(2,1),(2,2)],weights([r*r1,r*(P[mid,fin]-r1),(P[ini,mid]-r)*r1,(P[ini,mid]-r)*(P[mid,fin]-r1)]))\n",
    "      end\n",
    "    end\n",
    "  else\n",
    "    # We sample to see wich state we passed through\n",
    "    mid=sample(E,weights(prob))\n",
    "\n",
    "    # Once we have the state, we check to see in which manner we did so (number of jumps)\n",
    "    if ini==mid\n",
    "      if mid==fin\n",
    "        r=exp(t1*Qii[ini])\n",
    "        rc=P[ini,mid]-r\n",
    "        (bef,aft)=sample([(0,0),(0,2),(2,0),(2,2)],weights([r*r,r*rc,rc*r,rc*rc]))\n",
    "      else\n",
    "        r=exp(t1*Qii[ini])\n",
    "        if Qii[mid]==Qii[fin]\n",
    "          r1=t*exp(t1*Qii[mid])*Q[mid,fin]\n",
    "        else\n",
    "          r1=(exp(t1*Qii[mid])-exp(t1*Qii[fin]))*Q[mid,fin]/(Qii[fin]-Qii[mid])\n",
    "        end\n",
    "        (bef,aft)=sample([(0,1),(0,2),(2,1),(2,2)],weights([r*r1,r*(P[mid,fin]-r1),(P[ini,mid]-r)*r1,(P[ini,mid]-r)*(P[mid,fin]-r1)]))\n",
    "      end\n",
    "    else\n",
    "      if mid==fin\n",
    "        if Qii[ini]==Qii[mid]\n",
    "          r=t*exp(t1*Qii[ini])*Q[ini,mid]\n",
    "        else\n",
    "          r=(exp(t1*Qii[ini])-exp(t1*Qii[mid]))*Q[ini,mid]/(Qii[mid]-Qii[ini])\n",
    "        end\n",
    "        r1=exp(t1*Qii[mid])\n",
    "        (bef,aft)=sample([(1,0),(1,2),(2,0),(2,2)],weights([r*r1,r*(P[mid,fin]-r1),(P[ini,mid]-r)*r1,(P[ini,mid]-r)*(P[mid,fin]-r1)]))\n",
    "      else\n",
    "        if Qii[ini]==Qii[mid]\n",
    "          r=t*exp(t1*Qii[ini])*Q[ini,mid]\n",
    "        else\n",
    "          r=(exp(t1*Qii[ini])-exp(t1*Qii[mid]))*Q[ini,mid]/(Qii[mid]-Qii[ini])\n",
    "        end\n",
    "        if Qii[mid]==Qii[fin]\n",
    "          r1=t*exp(t1*Qii[mid])*Q[mid,fin]\n",
    "        else\n",
    "          r1=(exp(t1*Qii[mid])-exp(t1*Qii[fin]))*Q[mid,fin]/(Qii[fin]-Qii[mid])\n",
    "        end\n",
    "        (bef,aft)=sample([(1,1),(1,2),(2,1),(2,2)],weights([r*r1,r*(P[mid,fin]-r1),(P[ini,mid]-r)*r1,(P[ini,mid]-r)*(P[mid,fin]-r1)]))\n",
    "      end\n",
    "    end\n",
    "  end\n",
    "\n",
    "  if bef==1\n",
    "    if Qii[fin]>Qii[ini]\n",
    "      tray=vcat(tray,[T1+rand(Truncated(Exponential(1/(Qii[fin]-Qii[ini])),0,t)) mid])\n",
    "    elseif Qii[fin]<Qii[ini]\n",
    "      tray=vcat(tray,[T1+t-rand(Truncated(Exponential(1/(Qii[ini]-Qii[fin])),0,t)) mid])\n",
    "    else\n",
    "      tray=vcat(tray,[T1+rand(1)*t mid])\n",
    "    end\n",
    "  elseif bef==2\n",
    "    tray=vcat(MJPBisect(ini,mid,m,E,Q,Qii,T1,T1+t,true),tray)\n",
    "  end\n",
    "  if aft==1\n",
    "    if Qii[fin]>Qii[ini]\n",
    "      tray=vcat(tray,[T1+t+rand(Truncated(Exponential(1/(Qii[fin]-Qii[ini])),0,t)) fin])\n",
    "    elseif Qii[fin]<Qii[ini]\n",
    "      tray=vcat(tray,[T2-rand(Truncated(Exponential(1/(Qii[ini]-Qii[fin])),0,t)) fin])\n",
    "    else\n",
    "      tray=vcat(tray,[T1+t+rand(1)*t fin])\n",
    "    end\n",
    "  elseif aft==2\n",
    "    tray=vcat(tray,MJPBisect(mid,fin,m,E,Q,Qii,T1+t,T2,true))\n",
    "  end\n",
    "  return(tray)\n",
    "end\n",
    "#####################################################\n",
    "function MJPBridgeBisection(tray,Q)\n",
    "  m=length(Q[1,1:end])\n",
    "  n=length(tray[1:end,1])-1\n",
    "  E=1:m\n",
    "  Qii=-diag(Q)\n",
    "  tray0=hcat([],[])\n",
    "  for i = 1:n\n",
    "    mat=MJPBisect(tray[i,2],tray[i+1,2],m,E,Q,Qii,tray[i,1],tray[i+1,1],false)\n",
    "    mat=sortrows(mat)\n",
    "    rng=hcat(mat[1,1],mat[1,2])\n",
    "    for k = 2:length(mat[1:end,1])\n",
    "      if mat[k,2]!=mat[k-1,2]\n",
    "        rng=vcat(rng,mat[k,1:2])\n",
    "      end\n",
    "    end\n",
    "    tray0=vcat(tray0,rng)\n",
    "  end\n",
    "  tray0=vcat(tray0,tray[end;1:2])\n",
    "  return(tray0)\n",
    "end\n",
    "Q=[-4 2 1 1;\n",
    "   2 -6 3 1;\n",
    "   1 1 -4 2;\n",
    "   1 3 2 -6]\n",
    "tray0=[0.1 2;\n",
    "      0.15 3;\n",
    "      0.25 1;\n",
    "      0.40 2;\n",
    "      0.67 1;\n",
    "      0.88 4;\n",
    "      1.2 2]\n",
    "B=MJPBridgeBisection(tray0,Q)\n",
    "length(B[:,1])\n",
    "\n",
    "\n",
    "function cuenta(trayecto)\n",
    "  tra=trayecto\n",
    "  tam=size(tra)[1]\n",
    "  E=tra[1:end,2]\n",
    "  n=size(unique(E),1)\n",
    "  T=tra[1:end,1]\n",
    "  R=zeros(n)\n",
    "  N=zeros(n,n)\n",
    "  for i in 1:(tam-1)\n",
    "    delta=T[i+1]-T[i]\n",
    "    R[E[i]]=R[E[i]]+delta\n",
    "    N[E[i],E[i+1]]=N[E[i],E[i+1]]+1\n",
    "  end\n",
    "  return (R,N)\n",
    "end\n",
    "\n",
    "function EstimMCC(trayecto)\n",
    "  tra= trayecto\n",
    "  tam=size(tra)[1]\n",
    "  E=tra[1:end,2]\n",
    "  n=size(unique(E),1)\n",
    "  T=tra[1:end,1]\n",
    "  R=zeros(n)\n",
    "  N=zeros(n,n)\n",
    "  Q=zeros(n,n)\n",
    "  P=zeros(n)\n",
    "  for i in 1:(tam-1)\n",
    "    delta=T[i+1]-T[i]\n",
    "    R[E[i]]=R[E[i]]+delta\n",
    "    N[E[i],E[i+1]]=N[E[i],E[i+1]]+1\n",
    "  end\n",
    "  Q=N./R\n",
    "    for i in 1:n\n",
    "        Q[i,i]=-sum(Q,2)[i]\n",
    "    end\n",
    "    P=N./sum(N,2)\n",
    "  return (Q,P)\n",
    "end\n",
    "\n",
    "cuenta(tray0)\n",
    "EstimMCC(tray0)\n",
    "\n",
    "N=cuenta(tray0)[2]\n",
    "Ri=cuenta(tray0)[1]\n",
    "Es=cuenta(tray0)[2]\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EMQ (generic function with 1 method)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function EMQ(tray,NE,RE,ite)\n",
    "    E=tray[1:end,2]\n",
    "    n=size(unique(E),1) \n",
    "    N=zeros(n,n)\n",
    "    R=zeros(n)  \n",
    "    EN=zeros(n,n)\n",
    "    ER=zeros(n)\n",
    "    Q=zeros(n,n,ite)\n",
    "    for k in 1:ite\n",
    "        tra=MJPBridgeBisection(tray,Q[:,:,k])\n",
    "        m=length(tra[:,1])\n",
    "        N=cuenta(tra)[2]\n",
    "        R=cuenta(tra)[1]\n",
    "        for i in 1:n\n",
    "            for j in 1:n\n",
    "                if i!=j\n",
    "                    EN[i,j]=mean(N[i,j])\n",
    "                    ER[i]=mean(R[i])\n",
    "                    Q[i,j,k]=EN[i,j]/ER[i]\n",
    "                    Q[i,j,1]=mean(NE[i,j])/mean(RE[i])\n",
    "                end\n",
    "                \n",
    "            end\n",
    "            Q[i,i,k]=-sum(Q[:,:,k],2)[i]\n",
    "            Q[i,i,1]=-sum(Q[:,:,1],2)[i]\n",
    "        end\n",
    "\n",
    "    end\n",
    "    return (Q)\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4x4x100 Array{Float64,3}:\n",
       "[:, :, 1] =\n",
       " -5.55556   2.77778    0.0     2.77778\n",
       "  3.125    -6.25       3.125   0.0    \n",
       " 10.0       0.0      -10.0     0.0    \n",
       "  0.0       3.125      0.0    -3.125  \n",
       "\n",
       "[:, :, 2] =\n",
       " -5.36762    2.68381    1.3419   1.3419 \n",
       " 10.8519   -10.8519     0.0      0.0    \n",
       " 23.4509     0.0      -23.4509   0.0    \n",
       "  7.82177    0.0        0.0     -7.82177\n",
       "\n",
       "[:, :, 3] =\n",
       " -4.99235    2.49618    1.24809    1.24809\n",
       " 12.5542   -12.5542     0.0        0.0    \n",
       " 22.1922     0.0      -22.1922     0.0    \n",
       " 10.5926     0.0        0.0      -10.5926 \n",
       "\n",
       "...\n",
       "\n",
       "[:, :, 98] =\n",
       " -5.91925   2.95962    1.47981   1.47981\n",
       "  8.33427  -8.33427    0.0       0.0    \n",
       " 63.6278    0.0      -63.6278    0.0    \n",
       "  5.933     0.0        0.0      -5.933  \n",
       "\n",
       "[:, :, 99] =\n",
       " -4.51405    2.25703    1.12851    1.12851\n",
       " 13.1493   -13.1493     0.0        0.0    \n",
       " 91.8352     0.0      -91.8352     0.0    \n",
       " 19.6503     0.0        0.0      -19.6503 \n",
       "\n",
       "[:, :, 100] =\n",
       " -4.88924    2.44462    1.22231    1.22231\n",
       " 14.8721   -14.8721     0.0        0.0    \n",
       " 16.9257     0.0      -16.9257     0.0    \n",
       " 11.323      0.0        0.0      -11.323  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EMQ(tray0,Es,Ri,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1001x2 Array{Int64,2}:\n",
       "    1  4\n",
       "    2  1\n",
       "    3  4\n",
       "    4  3\n",
       "    5  3\n",
       "    6  2\n",
       "    7  3\n",
       "    8  1\n",
       "    9  2\n",
       "   10  3\n",
       "   11  4\n",
       "   12  1\n",
       "   13  1\n",
       "    â®   \n",
       "  990  4\n",
       "  991  4\n",
       "  992  4\n",
       "  993  2\n",
       "  994  1\n",
       "  995  2\n",
       "  996  3\n",
       "  997  4\n",
       "  998  1\n",
       "  999  3\n",
       " 1000  3\n",
       " 1001  2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datos=[1     4\n",
    "2     1\n",
    "3     4\n",
    "4     3\n",
    "5     3\n",
    "6     2\n",
    "7     3\n",
    "8     1\n",
    "9     2\n",
    "10    3\n",
    "11    4\n",
    "12    1\n",
    "13    1\n",
    "14    4\n",
    "15    3\n",
    "16    2\n",
    "17    3\n",
    "18    4\n",
    "19    1\n",
    "20    3\n",
    "21    3\n",
    "22    1\n",
    "23    3\n",
    "24    1\n",
    "25    4\n",
    "26    2\n",
    "27    1\n",
    "28    1\n",
    "29    1\n",
    "30    1\n",
    "31    1\n",
    "32    2\n",
    "33    4\n",
    "34    1\n",
    "35    4\n",
    "36    3\n",
    "37    3\n",
    "38    3\n",
    "39    3\n",
    "40    3\n",
    "41    4\n",
    "42    1\n",
    "43    3\n",
    "44    1\n",
    "45    3\n",
    "46    2\n",
    "47    1\n",
    "48    2\n",
    "49    1\n",
    "50    3\n",
    "51    3\n",
    "52    3\n",
    "53    1\n",
    "54    4\n",
    "55    2\n",
    "56    2\n",
    "57    3\n",
    "58    1\n",
    "59    2\n",
    "60    1\n",
    "61    3\n",
    "62    3\n",
    "63    2\n",
    "64    2\n",
    "65    3\n",
    "66    2\n",
    "67    3\n",
    "68    4\n",
    "69    3\n",
    "70    3\n",
    "71    2\n",
    "72    3\n",
    "73    3\n",
    "74    3\n",
    "75    2\n",
    "76    3\n",
    "77    4\n",
    "78    4\n",
    "79    3\n",
    "80    3\n",
    "81    2\n",
    "82    1\n",
    "83    2\n",
    "84    3\n",
    "85    2\n",
    "86    1\n",
    "87    3\n",
    "88    1\n",
    "89    2\n",
    "90    3\n",
    "91    2\n",
    "92    1\n",
    "93    1\n",
    "94    2\n",
    "95    1\n",
    "96    3\n",
    "97    4\n",
    "98    4\n",
    "99    2\n",
    "100   1\n",
    "101   2\n",
    "102   1\n",
    "103   2\n",
    "104   1\n",
    "105   3\n",
    "106   1\n",
    "107   4\n",
    "108   3\n",
    "109   1\n",
    "110   4\n",
    "111   3\n",
    "112   3\n",
    "113   4\n",
    "114   2\n",
    "115   3\n",
    "116   3\n",
    "117   3\n",
    "118   4\n",
    "119   2\n",
    "120   2\n",
    "121   3\n",
    "122   4\n",
    "123   2\n",
    "124   4\n",
    "125   1\n",
    "126   3\n",
    "127   4\n",
    "128   1\n",
    "129   1\n",
    "130   2\n",
    "131   1\n",
    "132   1\n",
    "133   4\n",
    "134   2\n",
    "135   2\n",
    "136   1\n",
    "137   3\n",
    "138   1\n",
    "139   1\n",
    "140   3\n",
    "141   4\n",
    "142   3\n",
    "143   4\n",
    "144   2\n",
    "145   1\n",
    "146   3\n",
    "147   2\n",
    "148   4\n",
    "149   3\n",
    "150   1\n",
    "151   1\n",
    "152   1\n",
    "153   1\n",
    "154   1\n",
    "155   1\n",
    "156   1\n",
    "157   1\n",
    "158   1\n",
    "159   3\n",
    "160   2\n",
    "161   2\n",
    "162   4\n",
    "163   2\n",
    "164   4\n",
    "165   2\n",
    "166   3\n",
    "167   1\n",
    "168   3\n",
    "169   2\n",
    "170   2\n",
    "171   1\n",
    "172   1\n",
    "173   4\n",
    "174   3\n",
    "175   3\n",
    "176   4\n",
    "177   3\n",
    "178   4\n",
    "179   1\n",
    "180   2\n",
    "181   2\n",
    "182   2\n",
    "183   1\n",
    "184   1\n",
    "185   1\n",
    "186   3\n",
    "187   2\n",
    "188   2\n",
    "189   1\n",
    "190   1\n",
    "191   3\n",
    "192   1\n",
    "193   2\n",
    "194   1\n",
    "195   4\n",
    "196   2\n",
    "197   4\n",
    "198   3\n",
    "199   1\n",
    "200   3\n",
    "201   2\n",
    "202   3\n",
    "203   2\n",
    "204   1\n",
    "205   3\n",
    "206   4\n",
    "207   2\n",
    "208   1\n",
    "209   2\n",
    "210   2\n",
    "211   2\n",
    "212   1\n",
    "213   3\n",
    "214   3\n",
    "215   1\n",
    "216   4\n",
    "217   1\n",
    "218   3\n",
    "219   3\n",
    "220   3\n",
    "221   2\n",
    "222   1\n",
    "223   1\n",
    "224   4\n",
    "225   3\n",
    "226   2\n",
    "227   3\n",
    "228   2\n",
    "229   4\n",
    "230   3\n",
    "231   3\n",
    "232   1\n",
    "233   1\n",
    "234   2\n",
    "235   4\n",
    "236   4\n",
    "237   1\n",
    "238   3\n",
    "239   1\n",
    "240   3\n",
    "241   3\n",
    "242   3\n",
    "243   3\n",
    "244   1\n",
    "245   4\n",
    "246   2\n",
    "247   3\n",
    "248   2\n",
    "249   3\n",
    "250   3\n",
    "251   2\n",
    "252   2\n",
    "253   1\n",
    "254   4\n",
    "255   3\n",
    "256   2\n",
    "257   3\n",
    "258   2\n",
    "259   3\n",
    "260   3\n",
    "261   3\n",
    "262   1\n",
    "263   1\n",
    "264   3\n",
    "265   1\n",
    "266   4\n",
    "267   4\n",
    "268   4\n",
    "269   2\n",
    "270   1\n",
    "271   1\n",
    "272   1\n",
    "273   2\n",
    "274   3\n",
    "275   4\n",
    "276   3\n",
    "277   3\n",
    "278   3\n",
    "279   4\n",
    "280   1\n",
    "281   1\n",
    "282   3\n",
    "283   3\n",
    "284   2\n",
    "285   4\n",
    "286   3\n",
    "287   3\n",
    "288   2\n",
    "289   1\n",
    "290   3\n",
    "291   1\n",
    "292   3\n",
    "293   4\n",
    "294   3\n",
    "295   4\n",
    "296   3\n",
    "297   1\n",
    "298   3\n",
    "299   4\n",
    "300   3\n",
    "301   3\n",
    "302   2\n",
    "303   2\n",
    "304   1\n",
    "305   3\n",
    "306   3\n",
    "307   4\n",
    "308   4\n",
    "309   2\n",
    "310   4\n",
    "311   2\n",
    "312   2\n",
    "313   4\n",
    "314   3\n",
    "315   3\n",
    "316   3\n",
    "317   3\n",
    "318   4\n",
    "319   4\n",
    "320   1\n",
    "321   4\n",
    "322   2\n",
    "323   2\n",
    "324   2\n",
    "325   1\n",
    "326   3\n",
    "327   3\n",
    "328   3\n",
    "329   4\n",
    "330   3\n",
    "331   2\n",
    "332   1\n",
    "333   4\n",
    "334   2\n",
    "335   3\n",
    "336   1\n",
    "337   2\n",
    "338   1\n",
    "339   2\n",
    "340   2\n",
    "341   3\n",
    "342   2\n",
    "343   4\n",
    "344   2\n",
    "345   3\n",
    "346   1\n",
    "347   3\n",
    "348   2\n",
    "349   1\n",
    "350   2\n",
    "351   1\n",
    "352   4\n",
    "353   3\n",
    "354   3\n",
    "355   2\n",
    "356   3\n",
    "357   3\n",
    "358   2\n",
    "359   2\n",
    "360   3\n",
    "361   3\n",
    "362   3\n",
    "363   4\n",
    "364   4\n",
    "365   2\n",
    "366   1\n",
    "367   1\n",
    "368   4\n",
    "369   2\n",
    "370   4\n",
    "371   1\n",
    "372   2\n",
    "373   1\n",
    "374   3\n",
    "375   1\n",
    "376   4\n",
    "377   4\n",
    "378   1\n",
    "379   2\n",
    "380   2\n",
    "381   1\n",
    "382   3\n",
    "383   2\n",
    "384   2\n",
    "385   3\n",
    "386   1\n",
    "387   1\n",
    "388   4\n",
    "389   1\n",
    "390   2\n",
    "391   3\n",
    "392   3\n",
    "393   2\n",
    "394   1\n",
    "395   2\n",
    "396   1\n",
    "397   3\n",
    "398   3\n",
    "399   3\n",
    "400   1\n",
    "401   2\n",
    "402   3\n",
    "403   1\n",
    "404   1\n",
    "405   1\n",
    "406   3\n",
    "407   2\n",
    "408   4\n",
    "409   1\n",
    "410   4\n",
    "411   3\n",
    "412   1\n",
    "413   1\n",
    "414   2\n",
    "415   2\n",
    "416   1\n",
    "417   2\n",
    "418   2\n",
    "419   2\n",
    "420   1\n",
    "421   3\n",
    "422   3\n",
    "423   2\n",
    "424   1\n",
    "425   1\n",
    "426   4\n",
    "427   4\n",
    "428   2\n",
    "429   2\n",
    "430   4\n",
    "431   4\n",
    "432   2\n",
    "433   1\n",
    "434   3\n",
    "435   3\n",
    "436   3\n",
    "437   3\n",
    "438   1\n",
    "439   1\n",
    "440   1\n",
    "441   2\n",
    "442   4\n",
    "443   1\n",
    "444   2\n",
    "445   2\n",
    "446   2\n",
    "447   2\n",
    "448   4\n",
    "449   1\n",
    "450   4\n",
    "451   3\n",
    "452   4\n",
    "453   2\n",
    "454   4\n",
    "455   3\n",
    "456   2\n",
    "457   3\n",
    "458   4\n",
    "459   3\n",
    "460   3\n",
    "461   3\n",
    "462   4\n",
    "463   4\n",
    "464   3\n",
    "465   1\n",
    "466   2\n",
    "467   2\n",
    "468   3\n",
    "469   2\n",
    "470   4\n",
    "471   3\n",
    "472   2\n",
    "473   2\n",
    "474   1\n",
    "475   3\n",
    "476   1\n",
    "477   3\n",
    "478   2\n",
    "479   2\n",
    "480   2\n",
    "481   1\n",
    "482   2\n",
    "483   1\n",
    "484   3\n",
    "485   1\n",
    "486   4\n",
    "487   2\n",
    "488   3\n",
    "489   2\n",
    "490   1\n",
    "491   2\n",
    "492   3\n",
    "493   1\n",
    "494   4\n",
    "495   3\n",
    "496   3\n",
    "497   2\n",
    "498   2\n",
    "499   3\n",
    "500   1\n",
    "501   3\n",
    "502   3\n",
    "503   3\n",
    "504   1\n",
    "505   3\n",
    "506   1\n",
    "507   1\n",
    "508   1\n",
    "509   2\n",
    "510   1\n",
    "511   4\n",
    "512   2\n",
    "513   3\n",
    "514   2\n",
    "515   3\n",
    "516   1\n",
    "517   3\n",
    "518   2\n",
    "519   4\n",
    "520   3\n",
    "521   2\n",
    "522   1\n",
    "523   1\n",
    "524   3\n",
    "525   3\n",
    "526   1\n",
    "527   2\n",
    "528   3\n",
    "529   2\n",
    "530   2\n",
    "531   4\n",
    "532   1\n",
    "533   3\n",
    "534   4\n",
    "535   1\n",
    "536   4\n",
    "537   2\n",
    "538   2\n",
    "539   1\n",
    "540   4\n",
    "541   2\n",
    "542   3\n",
    "543   4\n",
    "544   3\n",
    "545   3\n",
    "546   1\n",
    "547   2\n",
    "548   1\n",
    "549   2\n",
    "550   4\n",
    "551   1\n",
    "552   2\n",
    "553   4\n",
    "554   3\n",
    "555   4\n",
    "556   3\n",
    "557   1\n",
    "558   3\n",
    "559   2\n",
    "560   2\n",
    "561   1\n",
    "562   3\n",
    "563   2\n",
    "564   2\n",
    "565   2\n",
    "566   3\n",
    "567   2\n",
    "568   3\n",
    "569   4\n",
    "570   2\n",
    "571   1\n",
    "572   3\n",
    "573   2\n",
    "574   1\n",
    "575   2\n",
    "576   1\n",
    "577   3\n",
    "578   4\n",
    "579   1\n",
    "580   1\n",
    "581   1\n",
    "582   3\n",
    "583   3\n",
    "584   4\n",
    "585   4\n",
    "586   1\n",
    "587   1\n",
    "588   2\n",
    "589   4\n",
    "590   3\n",
    "591   3\n",
    "592   2\n",
    "593   1\n",
    "594   1\n",
    "595   2\n",
    "596   3\n",
    "597   4\n",
    "598   1\n",
    "599   3\n",
    "600   4\n",
    "601   2\n",
    "602   2\n",
    "603   1\n",
    "604   1\n",
    "605   1\n",
    "606   4\n",
    "607   3\n",
    "608   4\n",
    "609   1\n",
    "610   3\n",
    "611   1\n",
    "612   1\n",
    "613   1\n",
    "614   2\n",
    "615   1\n",
    "616   3\n",
    "617   3\n",
    "618   2\n",
    "619   3\n",
    "620   2\n",
    "621   3\n",
    "622   3\n",
    "623   2\n",
    "624   3\n",
    "625   3\n",
    "626   3\n",
    "627   1\n",
    "628   3\n",
    "629   3\n",
    "630   1\n",
    "631   3\n",
    "632   3\n",
    "633   4\n",
    "634   4\n",
    "635   4\n",
    "636   3\n",
    "637   3\n",
    "638   4\n",
    "639   1\n",
    "640   3\n",
    "641   3\n",
    "642   3\n",
    "643   1\n",
    "644   4\n",
    "645   2\n",
    "646   1\n",
    "647   1\n",
    "648   4\n",
    "649   2\n",
    "650   3\n",
    "651   2\n",
    "652   3\n",
    "653   3\n",
    "654   1\n",
    "655   4\n",
    "656   4\n",
    "657   1\n",
    "658   3\n",
    "659   1\n",
    "660   3\n",
    "661   1\n",
    "662   4\n",
    "663   4\n",
    "664   4\n",
    "665   3\n",
    "666   4\n",
    "667   4\n",
    "668   3\n",
    "669   3\n",
    "670   2\n",
    "671   3\n",
    "672   4\n",
    "673   2\n",
    "674   3\n",
    "675   1\n",
    "676   4\n",
    "677   4\n",
    "678   2\n",
    "679   3\n",
    "680   2\n",
    "681   2\n",
    "682   2\n",
    "683   1\n",
    "684   4\n",
    "685   1\n",
    "686   2\n",
    "687   2\n",
    "688   4\n",
    "689   1\n",
    "690   3\n",
    "691   4\n",
    "692   4\n",
    "693   1\n",
    "694   4\n",
    "695   3\n",
    "696   3\n",
    "697   1\n",
    "698   2\n",
    "699   3\n",
    "700   1\n",
    "701   2\n",
    "702   4\n",
    "703   1\n",
    "704   3\n",
    "705   1\n",
    "706   2\n",
    "707   3\n",
    "708   3\n",
    "709   2\n",
    "710   2\n",
    "711   3\n",
    "712   2\n",
    "713   4\n",
    "714   2\n",
    "715   3\n",
    "716   3\n",
    "717   2\n",
    "718   4\n",
    "719   1\n",
    "720   3\n",
    "721   2\n",
    "722   4\n",
    "723   1\n",
    "724   1\n",
    "725   4\n",
    "726   4\n",
    "727   3\n",
    "728   1\n",
    "729   1\n",
    "730   1\n",
    "731   2\n",
    "732   1\n",
    "733   4\n",
    "734   1\n",
    "735   3\n",
    "736   4\n",
    "737   3\n",
    "738   1\n",
    "739   1\n",
    "740   3\n",
    "741   3\n",
    "742   4\n",
    "743   1\n",
    "744   3\n",
    "745   2\n",
    "746   2\n",
    "747   2\n",
    "748   1\n",
    "749   1\n",
    "750   3\n",
    "751   4\n",
    "752   1\n",
    "753   4\n",
    "754   2\n",
    "755   3\n",
    "756   4\n",
    "757   2\n",
    "758   1\n",
    "759   4\n",
    "760   2\n",
    "761   4\n",
    "762   4\n",
    "763   3\n",
    "764   2\n",
    "765   1\n",
    "766   3\n",
    "767   4\n",
    "768   3\n",
    "769   2\n",
    "770   1\n",
    "771   4\n",
    "772   1\n",
    "773   1\n",
    "774   4\n",
    "775   4\n",
    "776   3\n",
    "777   2\n",
    "778   3\n",
    "779   2\n",
    "780   4\n",
    "781   1\n",
    "782   4\n",
    "783   2\n",
    "784   1\n",
    "785   3\n",
    "786   3\n",
    "787   1\n",
    "788   1\n",
    "789   3\n",
    "790   1\n",
    "791   1\n",
    "792   4\n",
    "793   3\n",
    "794   4\n",
    "795   3\n",
    "796   2\n",
    "797   4\n",
    "798   3\n",
    "799   1\n",
    "800   3\n",
    "801   3\n",
    "802   1\n",
    "803   2\n",
    "804   3\n",
    "805   3\n",
    "806   1\n",
    "807   2\n",
    "808   1\n",
    "809   3\n",
    "810   1\n",
    "811   4\n",
    "812   1\n",
    "813   1\n",
    "814   4\n",
    "815   1\n",
    "816   1\n",
    "817   1\n",
    "818   2\n",
    "819   4\n",
    "820   1\n",
    "821   1\n",
    "822   3\n",
    "823   1\n",
    "824   1\n",
    "825   2\n",
    "826   2\n",
    "827   2\n",
    "828   4\n",
    "829   4\n",
    "830   3\n",
    "831   4\n",
    "832   4\n",
    "833   3\n",
    "834   1\n",
    "835   4\n",
    "836   4\n",
    "837   1\n",
    "838   2\n",
    "839   1\n",
    "840   2\n",
    "841   4\n",
    "842   1\n",
    "843   3\n",
    "844   3\n",
    "845   3\n",
    "846   1\n",
    "847   3\n",
    "848   1\n",
    "849   4\n",
    "850   2\n",
    "851   2\n",
    "852   4\n",
    "853   3\n",
    "854   3\n",
    "855   3\n",
    "856   4\n",
    "857   4\n",
    "858   1\n",
    "859   2\n",
    "860   3\n",
    "861   3\n",
    "862   3\n",
    "863   1\n",
    "864   3\n",
    "865   2\n",
    "866   4\n",
    "867   1\n",
    "868   3\n",
    "869   2\n",
    "870   4\n",
    "871   3\n",
    "872   3\n",
    "873   2\n",
    "874   3\n",
    "875   4\n",
    "876   4\n",
    "877   3\n",
    "878   2\n",
    "879   2\n",
    "880   3\n",
    "881   3\n",
    "882   1\n",
    "883   3\n",
    "884   4\n",
    "885   3\n",
    "886   2\n",
    "887   4\n",
    "888   4\n",
    "889   1\n",
    "890   2\n",
    "891   1\n",
    "892   3\n",
    "893   1\n",
    "894   4\n",
    "895   3\n",
    "896   4\n",
    "897   3\n",
    "898   4\n",
    "899   1\n",
    "900   2\n",
    "901   4\n",
    "902   3\n",
    "903   1\n",
    "904   4\n",
    "905   2\n",
    "906   3\n",
    "907   3\n",
    "908   1\n",
    "909   1\n",
    "910   2\n",
    "911   2\n",
    "912   3\n",
    "913   1\n",
    "914   2\n",
    "915   1\n",
    "916   2\n",
    "917   3\n",
    "918   4\n",
    "919   3\n",
    "920   3\n",
    "921   2\n",
    "922   3\n",
    "923   1\n",
    "924   1\n",
    "925   1\n",
    "926   4\n",
    "927   2\n",
    "928   1\n",
    "929   4\n",
    "930   3\n",
    "931   1\n",
    "932   2\n",
    "933   1\n",
    "934   3\n",
    "935   2\n",
    "936   3\n",
    "937   1\n",
    "938   3\n",
    "939   4\n",
    "940   3\n",
    "941   2\n",
    "942   4\n",
    "943   3\n",
    "944   3\n",
    "945   3\n",
    "946   2\n",
    "947   3\n",
    "948   3\n",
    "949   1\n",
    "950   4\n",
    "951   3\n",
    "952   3\n",
    "953   3\n",
    "954   1\n",
    "955   3\n",
    "956   2\n",
    "957   1\n",
    "958   3\n",
    "959   4\n",
    "960   3\n",
    "961   3\n",
    "962   3\n",
    "963   2\n",
    "964   1\n",
    "965   4\n",
    "966   2\n",
    "967   2\n",
    "968   1\n",
    "969   4\n",
    "970   2\n",
    "971   3\n",
    "972   2\n",
    "973   1\n",
    "974   1\n",
    "975   2\n",
    "976   3\n",
    "977   3\n",
    "978   3\n",
    "979   3\n",
    "980   4\n",
    "981   2\n",
    "982   3\n",
    "983   4\n",
    "984   4\n",
    "985   2\n",
    "986   1\n",
    "987   4\n",
    "988   2\n",
    "989   4\n",
    "990   4\n",
    "991   4\n",
    "992   4\n",
    "993   2\n",
    "994   1\n",
    "995   2\n",
    "996   3\n",
    "997   4\n",
    "998   1\n",
    "999   3\n",
    "1000  3\n",
    "1001  2\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4x4 Array{Float64,2}:\n",
       " 64.0  59.0  82.0  57.0\n",
       " 75.0  50.0  68.0  42.0\n",
       " 75.0  79.0  97.0  59.0\n",
       " 48.0  48.0  63.0  34.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EstimMCC(datos)\n",
    "cuenta(datos)\n",
    "R=cuenta(datos)[1]\n",
    "Qin=EstimMCC(datos)[1]\n",
    "Qe=cuenta(datos)[2]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4x4x1000 Array{Float64,3}:\n",
       "[:, :, 1] =\n",
       " -0.755725   0.225191   0.312977   0.217557\n",
       "  0.319149  -0.787234   0.289362   0.178723\n",
       "  0.241935   0.254839  -0.687097   0.190323\n",
       "  0.248705   0.248705   0.326425  -0.823834\n",
       "\n",
       "[:, :, 2] =\n",
       " -1.03442   0.345427   0.395569   0.293427\n",
       "  1.28631  -1.28631    0.0        0.0     \n",
       "  1.03276   0.0       -1.03276    0.0     \n",
       "  1.42638   0.0        0.0       -1.42638 \n",
       "\n",
       "[:, :, 3] =\n",
       " -1.03338   0.345079   0.395171   0.293131\n",
       "  1.30545  -1.30545    0.0        0.0     \n",
       "  1.04433   0.0       -1.04433    0.0     \n",
       "  1.37877   0.0        0.0       -1.37877 \n",
       "\n",
       "...\n",
       "\n",
       "[:, :, 998] =\n",
       " -1.03072   0.344191   0.394155   0.292378\n",
       "  1.26774  -1.26774    0.0        0.0     \n",
       "  1.03748   0.0       -1.03748    0.0     \n",
       "  1.46722   0.0        0.0       -1.46722 \n",
       "\n",
       "[:, :, 999] =\n",
       " -1.03181   0.344554   0.39457   0.292686\n",
       "  1.31759  -1.31759    0.0       0.0     \n",
       "  1.03088   0.0       -1.03088   0.0     \n",
       "  1.40527   0.0        0.0      -1.40527 \n",
       "\n",
       "[:, :, 1000] =\n",
       " -1.01607   0.339299   0.388552   0.288221\n",
       "  1.35016  -1.35016    0.0        0.0     \n",
       "  1.05353   0.0       -1.05353    0.0     \n",
       "  1.41193   0.0        0.0       -1.41193 "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EMQ(datos,Qe,R,1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.3.12",
   "language": "julia",
   "name": "julia-0.3"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.3.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
